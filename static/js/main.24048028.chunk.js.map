{"version":3,"sources":["tmdb.js","components/MovieRow/index.js","components/FeaturedMovie/index.js","components/Header/index.js","components/Footer/index.js","App.js","index.js"],"names":["api_key","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","style","fontSize","listWidth","results","length","marginLeft","width","map","item","key","src","poster_path","alt","original_title","firstDate","Date","first_air_date","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","genres","name","join","black","role","aria-label","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","useEffect","tmdb","list","originals","filter","randomNumber","floor","random","chosenMovie","chosenInfo","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","Header","FeaturedMovie","MovieRow","Footer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24048028.chunk.js","sourcesContent":["const api_key = \"15c8c15a4773811174d97fcf84d65eec\";\r\nconst api_base = \"https://api.themoviedb.org/3\";\r\n\r\n//Originais da Netflix\r\n//Recomendados (Trending)\r\n//Em alta (Top rated)\r\n//Ação\r\n//Comédia\r\n//Terror\r\n//Romance\r\n//Documentários\r\n\r\nconst basicFetch = async(endpoint) => {\r\n     const req = await fetch(`${api_base}${endpoint}`);\r\n     const json = await req.json();\r\n     return json;\r\n}\r\n\r\nexport default {\r\n     getHomeList: async () =>{\r\n          return [\r\n               {\r\n                    slug: 'originals',\r\n                    title: 'Originais do Netflix',\r\n                    items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${api_key}`)\r\n               },\r\n               {\r\n                    slug: 'trending',\r\n                    title: 'Recomendados para você',\r\n                    items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${api_key}`)\r\n               },\r\n               {\r\n                    slug: 'toprated',\r\n                    title: 'Em alta',\r\n                    items: await basicFetch(`/movie/top_rated?&language=pt-BR&api_key=${api_key}`)\r\n               },\r\n               {\r\n                    slug: 'action',\r\n                    title: 'Ação',\r\n                    items: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${api_key}`)\r\n               },\r\n               {\r\n                    slug: 'comedy',\r\n                    title: 'Comédia',\r\n                    items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${api_key}`)\r\n               },\r\n               {\r\n                    slug: 'horror',\r\n                    title: 'Terror',\r\n                    items: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${api_key}`)\r\n               },\r\n               {\r\n                    slug: 'romance',\r\n                    title: 'Romance',\r\n                    items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${api_key}`)\r\n               },\r\n               {\r\n                    slug: 'documentary',\r\n                    title: 'Documentários',\r\n                    items: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${api_key}`)\r\n               },\r\n          ]\r\n     },\r\n     getMovieInfo: async (movieId, type) => {\r\n          let info = {};\r\n\r\n          if(movieId){\r\n               switch(type){\r\n                    case 'movie':\r\n                         info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${api_key}`);\r\n                         break;\r\n                    case 'tv':\r\n                         info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${api_key}`);\r\n                         break;\r\n                    default:\r\n                         info = null;\r\n                         break;\r\n               }\r\n          }\r\n\r\n          return info;\r\n     }\r\n}","import React, {useState} from 'react';\r\nimport './styles.css';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nexport default ({title, items}) => {\r\n\r\n     const [scrollX, setScrollX] = useState(0);\r\n\r\n     const handleLeftArrow = () => {\r\n          let x = scrollX + Math.round(window.innerWidth / 2);\r\n          if(x>0){\r\n               x = 0;\r\n          }\r\n          setScrollX(x);\r\n     }\r\n\r\n     const handleRightArrow = () => {\r\n          let x = scrollX - Math.round(window.innerWidth / 2);\r\n          let listWidth = items.results.length * 150;\r\n          if((window.innerWidth-listWidth) > x){\r\n               x = (window.innerWidth-listWidth)-60;\r\n          }\r\n          setScrollX(x);\r\n     }\r\n\r\n     return(\r\n          <div className=\"movieRow\">\r\n               <h2>{title}</h2>\r\n\r\n               <div className=\"movieRow--left\" onClick={handleLeftArrow}>\r\n                    <NavigateBeforeIcon style={{fontSize: 50}}/>\r\n               </div>\r\n\r\n               <div className=\"movieRow--right\" onClick={handleRightArrow}>\r\n                    <NavigateNextIcon style={{fontSize: 50}}/>\r\n               </div>\r\n\r\n               <div className=\"movieRow--listarea\">\r\n                    <div className=\"movieRow--list\"  style={{\r\n                    marginLeft: scrollX,\r\n                    width: items.results.length * 150\r\n                    }}>\r\n                         {items.results.length > 0 && items.results.map((item, key) => (\r\n                              <div key={key} className=\"movieRow--item\">\r\n                                   <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title}></img>\r\n                              </div>\r\n                         ))}\r\n                    </div>\r\n               </div>\r\n          </div>\r\n     )\r\n}","import React from 'react';\r\nimport './styles.css';\r\n\r\nexport default ({item}) => {\r\n\r\n     let firstDate = new Date(item.first_air_date);\r\n     let description = item.overview\r\n     if(description.length>200){\r\n          description = `${description.substring(0, 200)}...`\r\n     }\r\n\r\n     return (\r\n          <section className=\"featured\" style={{\r\n               backgroundSize: 'cover',\r\n               backgroundPosition: 'center',\r\n               backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\r\n          }}>\r\n               <div className=\"featured--vertical\">\r\n                    <div className=\"featured--horizontal\">\r\n                         <div className=\"featured--name\">{item.original_name}</div>\r\n                         <div className=\"featured--info\">\r\n                              <div className=\"featured--score\">{item.vote_average} pontos</div>\r\n                              <div className=\"featured--year\">{firstDate.getFullYear()}</div>\r\n                              <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons>1 ? 's' : ''}</div>\r\n                         </div>\r\n                         <div className=\"featured--description\">\r\n                              {description}\r\n                         </div>\r\n                         <div className=\"featured--buttons\">\r\n                              <a href={`/watch/${item.id}`} className=\"featured--watchbutton\">► Assistir</a>\r\n                              <a href={`/add/${item.id}`} className=\"featured--mylistbutton\">+ Minha lista</a>\r\n                         </div>\r\n                         <div className=\"featured--genres\">\r\n                              Gêneros: {item.genres.map(item => item.name).join(\", \")}\r\n                         </div>\r\n                    </div>\r\n               </div>\r\n          </section>\r\n     );\r\n}","import React from 'react';\r\nimport './styles.css';\r\n\r\nexport default ({black}) => {\r\n     return (\r\n          <header className={(black ? 'black' : '')}>\r\n               <div className=\"header--logo\">\r\n                    <a href=\"/\">\r\n                         <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Logo_Netflix.png\" alt=\"Netflix\"></img>\r\n                    </a>\r\n               </div>\r\n               <div className=\"header--user\">\r\n                    <a href=\"/\">\r\n                         <img src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" alt=\"Current user\"></img>\r\n                    </a>\r\n               </div>\r\n          </header>\r\n     );\r\n}","import React from 'react';\r\nimport './styles.css';\r\n\r\n\r\nexport default () => {\r\n     return (\r\n          <footer>\r\n               Feito com <span role=\"img\" aria-label=\"Coração\">❤️</span> por <a href=\"https://github.com/Nxrth-x\">Eder Lima</a>.<br/>\r\n               Direitos de imagem <a href=\"https://netflix.com\">Netflix</a>.<br/>\r\n               Dados por <a href=\"https://themoviedb.org\">TMDB</a>.\r\n          </footer>\r\n     );\r\n}","import React, {useEffect, useState} from 'react';\nimport tmdb from './tmdb';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nimport './App.css';\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n  \n  useEffect(() => {\n    const loadAll = async() => {\n      //Pegando a lista dos filmes\n      let list = await tmdb.getHomeList();\n      setMovieList(list);\n\n      //Pegando o filme em destaque\n      let originals = list.filter(item => item.slug === 'originals');\n      let randomNumber = Math.floor(Math.random() * originals[0].items.results.length - 1);\n      let chosenMovie = originals[0].items.results[randomNumber];\n      let chosenInfo = await tmdb.getMovieInfo(chosenMovie.id, 'tv');\n      setFeaturedData(chosenInfo);\n    }\n\n    loadAll();\n  }, []);\n\n  useEffect(() => {\n    const scrollListener = () => {\n      (window.scrollY > 100) ? setBlackHeader(true) : setBlackHeader(false);\n    }\n\n    window.addEventListener('scroll', scrollListener);\n\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    }\n  }, [])\n\n  return (\n    <div className=\"page\">\n\n      <Header black={blackHeader} />\n\n      {\n        featuredData &&\n        <FeaturedMovie item={featuredData} />\n      }\n\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieRow key={key} title={item.title} items={item.items} />\n        ))}\n      </section>\n      \n      <Footer/>\n\n      {\n        movieList.length <=0 &&\n        <div className=\"loading\">\n          <img src=\"http://www.filmelier.com/pt/br/news/wp-content/uploads/2020/03/netflix-loading.gif\" alt=\"Carregando\" />\n        </div>\n      }\n\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}